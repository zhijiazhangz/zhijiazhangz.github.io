function f(ls,s)// Given a chain of integers ls=[a1,a2,a3..an] and an integer s, return chains [i1,i2..ir] where a_i1+..+a_ir=k, allowing repetition but not permutation 
    re:=<>;
	cand:=[];
	for i in [1..#ls] do 
		if ls[i] eq s then 
			Append(~re, [i]);
		else
			Append(~cand, [ls[i],i]);
		end if;
	end for;
    while #cand ne 0 do
        newc:=[];
        for x in cand do
            i:=x[#x];
            for j in [i..#ls] do
                newx:=x cat [j];
                newx[1]+:=ls[j];
                if newx[1] eq s then 
                    Remove(~newx, 1);
                    Append(~re,newx);                    
                elif newx[1] lt s then
                    Append(~newc,newx);
                end if;
            end for;
        end for;
        cand:=newc;
    end while;
    return re;
end function;


function FindScalar(G)
	n:=Ngens(G);
	gen:=[Identity(G)];
	for g in G do 
		if IsScalar(g) then
			Append(~gen,g);
		end if;
	end for;

	return sub<G|gen>;
end function;

function FindEigenspace(M)
	egspace:=<>;
	for lam in SetToSequence(Eigenvalues(M)) do
		ev:=lam[1];
		Append(~egspace,<Eigenspace(M,ev),<ev>>);
	end for;
	return egspace;
end function;

 function Findsckernel(f)
 G:=Domain(f);
	g:=[];
	for x in G do 
		if IsScalar(f(x)) then
			Append(~g,x);
		end if;
	end for;
	return sub<G|g>;
end function;


function Findkernel(f)
	G:=Domain(f);
	g:=[];
	for x in G do 
		if IsIdentity(f(x)) then
			Append(~g,x);
		end if;
	end for;
	return sub<G|g>;
end function;

function EigenspaceIntersection(G,k)
	if #G eq 1 then 
		return <<VectorSpace(BaseRing(G),Degree(G)),<>>>;
	end if;
	if k eq 1 then 
		return FindEigenspace(G.1);
	else
		tempegs:=EigenspaceIntersection(G,k-1);
		newegs:=FindEigenspace(G.k);
		resegs:=<>;
		for i in [1..#newegs] do
			for j in [1..#tempegs] do
				V:=tempegs[j][1] meet newegs[i][1];
				if Dimension(V) gt 0 then
					Append(~resegs,<V,tempegs[j][2] cat newegs[i][2] >);
				end if;
			end for;
		end for;
		return resegs;
	end if;
end function;

function Findfixlocus(G)
	KK:=BaseRing(G);
	n:=Ngens(G);
	egs:=EigenspaceIntersection(G,n);
	char:=<>;
	for y in egs do
		x:=[[i]:i in y[2]];
		S:=GModule(G, MatrixAlgebra<KK,1|x>);
		Append(~char, y cat <Representation(S)>);
	end for;

		return char;
end function;



function SchurMult(x)
	r:=[];
	for p in PrimesUpTo(#x) do
		if pMultiplicator(x, p)[1] ne 1 then
		r:=r cat [pMultiplicator(x, p)];
		end if;
	end for;
	if r eq [] then
		r:=[[1]];
	end if;
	return r;
	end function;

//Given x(GrpPC), Return Q(GrpPC):the Shcur covering group, 
//and [v(GrpPC)]:a list of subgroups of Z(Q) which are isomorphic to the Schur Multiplier 
function FindMult(x)
	G2:=FPGroup(x);
	G1:=PermutationGroup(G2);
	r:=pCover(G1,G2,2);
	i:=SchurMult(G1);
	C:=AbelianGroup(GrpPC, i[1]);
	Q:=PCGroup(r);//restricted to small soluable group only
	Z:=Center(Q);
	result:=[];

	for v in AllSubgroups(Z) do
		if result ne [] and #v gt #C then
				break v;
			end if;
		if IsNormal(Q,v) and IsIsomorphic(v,C) then
			if IsIsomorphic(quo<Q|v>, x) then
				result:=result cat [v];
			end if;
			
		end if;
	end for;
	if IsIsomorphic(Z,C) then
		centerschu:=true;
	else
		centerschu:=false;
	end if;


return Q,result,centerschu;
end function;




function SubPerm(G)
	for x in AllSubgroups(G) do
		if #x eq 1 then
			f,G:=CosetAction(G,x);
		end if;
	end for;
	return G;
end function;



function SchurCoveringGroup(G)
		G2:=FPGroup(G);
		G1:=PermutationGroup(G2);
	t,f:=IsIsomorphic(G1,G);t;
	r:=pCover(G1,G2,3);
return r;
end function;


function find(rG,s,proj)
if proj then 
G:=PCGroup(SchurCoveringGroup(rG));
GroupName(G);
if GroupName(rG) eq "A5" then 
	G:=SL(2,5);
end if;
else
	G:=rG;
end if;
ex:=Exponent(G);
p:=3;
sto:=true;
while sto do 
	if ((p-1) mod ex) eq 0 then 
	  	KK:=GF(p);
		sto:=false;
	else 
		p:=NextPrime(p);
	end if;
end while;
l:=IrreducibleModules(G,KK);
ls:=[];
for i in l do 
    Append(~ls,Dimension(i));
end for;
sm:=f(ls,s);
r:=[];
for x in sm do 
    md:=l[x[1]];
    for i in [2..#x] do
        md:=DirectSum(md,l[x[i]]);
    end for;
    if GroupName(G/Findsckernel(Representation(md))) eq GroupName(rG) then 
        Append(~r,md);
    end if;
end for;
    

ondim:=[];
for x in l do 
    if Dimension(x) eq 1 then 
        Append(~ondim,x);
    end if;
end for;
res:=[];
for x in r do
    for y in res do 
        for onee in ondim do
            if IsIsomorphic(TensorProduct(y,onee),x) then 
                continue x;
            end if;
        end for;
    end for;
    Append(~res,x);
end for;


gres:=[MatrixGroup(res[i]): i in [1..#res]];
return gres;
end function;



function vstops(V,P,KK)
    n:=Dimension(P);
    F:=VectorSpace(KK,n+1);
    W:=OrthogonalComplement(F,V);
    b:=Basis(W);
    res:=[];
    
    for x in b do
        sum:=0;
        coef:=Eltseq(x);
        for i in [1..n+1] do
            sum+:=coef[i]*P.i;
        end for;
        Append(~res,sum);
    end for;
    return Scheme(P,res);
end function;

function Schemefixlocus(X,G,KK)
    P:=AmbientSpace(X);
    Vs:=Findfixlocus(G);
    res:=[];
    for Vl in Vs do  
        V:=Vl[1];
        PV:=vstops(V,P,KK);
        fl:=PV meet X;
        if Dimension(fl) gt (-1) then 
			res:=res cat IrreducibleComponents(fl);
        end if;
    end for;
    return res;
end function;


function schemeorbit(X,gp)
	orb:={@@};
	Pp:=AmbientSpace(X);
	kx:=CoordinateRing(Pp);
	for g in gp do
	image:=[];
	for i in [1..Dimension(Pp)+1] do
		se:=Eltseq(Transpose(Matrix(g))[i]);
		poly:=0;
		for j in [1..#se] do
			poly+:=se[j]*kx.j;
		end for;
		Append(~image, poly);
	end for;
	fp:=hom<kx->kx|image>;
	defpoly:=DefiningPolynomials(X);
	newpoly:=[fp(pol):pol in defpoly];
	newscheme:=Scheme(Pp,newpoly);
	if not newscheme in orb then 
		Include(~orb, newscheme);
	end if;
	end for;	
	return orb;
end function;



function st(X,G,KK)
	l:=SubgroupLattice(G); len:=#l;
	Gfix:=Schemefixlocus(X,G,KK);
	stratification:=<>;
	locus:={@@};
	for x in Gfix do
		Append(~stratification, <G,x>);
		Include(~locus, x);
	end for;

	for i in [1..len-2] do 
		H:=l[len-i]; Hconj:=Conjugates(G,H);
		Hfix:=Schemefixlocus(X,H,KK);
		addHlocus:=false;
		for Y in Hfix do
			if not Y in locus then
				addHlocus:=true;
				Append(~stratification, <H,Y>);
			end if;
		end for;
		if addHlocus then 
			for Hp in Hconj do
				Hpfix:=Schemefixlocus(X,Hp,KK);
				for adlo in Hpfix do
					Include(~locus, adlo); 
				end for;
			end for;
		end if;
	end for;
	
	recc:=<>;
	for x in stratification do 
		for y in recc do
			if y[1] eq x[1] then
				
				if x[2] in schemeorbit(y[2], G) then
					continue x;
				end if;
				
			end if;		
		end for;
		Append(~recc, x);
	end for;


	return stratification,recc;
end function;


function vstops(V,P,KK)
    n:=Dimension(P);
    F:=VectorSpace(KK,n+1);
    W:=OrthogonalComplement(F,V);
    b:=Basis(W);
    res:=[];
    
    for x in b do
        sum:=0;
        coef:=Eltseq(x);
        for i in [1..n+1] do
            sum+:=coef[i]*P.i;
        end for;
        Append(~res,sum);
    end for;
    SCX:=Scheme(P,res);
    if not Dimension(SCX) eq Dimension(V)-1 then 
        "vstops wrong, dimension does not match";
        return "vstops wrong, dimension does not match";
    end if;
    return SCX;
end function;

function findcoeffoflinearpoly(polyn,n,KK)
res:=[];
for i in [1..n] do 
    s:=Coefficients(polyn,i);
    if #s eq 1 then 
        Append(~res,KK!0);
    else 
        Append(~res,KK!s[2]);
    end if;
end for;
return res;
end function;

function pstovs(X,P,KK)//Only for linear space
    n:=Dimension(P);
    F:=VectorSpace(KK,n+1);
    po:=DefiningPolynomials(X);
    bas:=[F!(findcoeffoflinearpoly(x,n+1,KK)):x in po];
    W:=sub<F|bas>;
    V:=OrthogonalComplement(F,W);
    if not (Dimension(V)-1) eq Dimension(X) then 
        "pstovs wrong, dimension does not match";
        return "pstovs wrong, dimension does not match";
    end if;
    return V;
end function;

function indtangetact(Y,X,P,KK,gp)//Y\subset X\subset P, Y is fixed locus of gp
    f:=GModule(gp);
    a:=Points(Y)[1];
    Ty:=TangentSpace(Y,a);
    Tx:=TangentSpace(X,a);
    TY:=pstovs(Ty,P,KK);  
    TX:=pstovs(Tx,P,KK);    
    TYgmod:=sub<f|TY>;
    TYdecom:=Decomposition(TYgmod);
    checktriv:=DirectSum([TYdecom[1]: i in [1..Dimension(TYgmod)]]);
    if not IsIsomorphic(TYgmod, checktriv) then 
        "action on Y is not trivial";
    end if;
    Tycha:=TYdecom[1];
    TXgmod:=sub<f|TX>;
    stat,TXqY:=HasComplement(TXgmod,TYgmod);
    if not stat then 
       "no complement of TY in TX";
    end if;
    return Tycha, TXqY;
end function;

function FindBlowupTangetAct(s,X,P,KK)//Y\subset X\subset P, Y is fixed locus of gp
	Y:=s[2];
	gp:=s[1];
    f:=GModule(gp);
    a:=Points(Y)[1];
    Ty:=TangentSpace(Y,a);
    Tx:=TangentSpace(X,a);
    TY:=pstovs(Ty,P,KK);  
    TX:=pstovs(Tx,P,KK);    
    TYgmod:=sub<f|TY>;
    TYdecom:=Decomposition(TYgmod);
    checktriv:=DirectSum([TYdecom[1]: i in [1..Dimension(TYgmod)]]);
    if not IsIsomorphic(TYgmod, checktriv) then 
        "action on Y is not trivial";
    end if;
    Tycha:=Representation(TYdecom[1]);
    TXgmod:=sub<f|TX>;
    stat,TXqY:=HasComplement(TXgmod,TYgmod);
    if not stat then 
       "no complement of TY in TX";
    end if;
    TangAct:=Decomposition(TXqY);
    ker:=gp;
    for decpmrep in TangAct do 
     	if Dimension(decpmrep) eq 1 then 
    		actrep:=Representation(decpmrep);
    		ke:=[];
    		for elmt in gp do 
    			if ((Tycha(elmt)[1][1])^(-1))*actrep(elmt) eq 1 then 
    				Append(~ke,elmt);
    			end if;
    		end for;
    		GroupName( sub<gp|ke>);
    		ker:=ker meet sub<gp|ke>;
    	end if;
    end for;
    return ker;
end function;



function finfld(r,d,K)//In finite field K, we have r (in K) living in Z/d 
	G,f:=MultiplicativeGroup(K);
	g:=Eltseq(r@@f)[1];
	n:=#G;
	return (g*d) div n;
end function;

function ftimesg(f,g)//f*g
	H:=Domain(f);
	K:=BaseRing(Codomain(f));
	S:=GModule(H, MatrixAlgebra<K,1|[[(f(H.i)[1][1])*(g(H.i)[1][1])]:i in [1..Ngens(H)]]>);
	return Representation(S);
end function;

function fminusone(f)//f^(-1)
	H:=Domain(f);
	K:=BaseRing(Codomain(f));
	S:=GModule(H, MatrixAlgebra<K,1|[[(f(H.i)[1][1])^(-1)]:i in [1..Ngens(H)]]>);
	return Representation(S);
end function;

function fginverse(f,g)//f*g-1, g nonzero
	return ftimesg(f,fminusone(g));
end function;


function charread(f)
	G:=Domain(f);//Have to be abelian 
	PCG,m:=PCGroup(G);//m:G->PCG
	if #PCG ne #G then
		return "charread wrong";
	end if;
	Ab,mm:=AbelianGroup(PCG);//mm:PCG->Ab
	n:=Ngens(Ab);
	K:=BaseRing(Codomain(f));
	cha:=[];
	gen:=[];
	for i in [1..n] do
		d:=Order(Ab.i);
		x:=(Ab.i@@mm)@@m;
		if Order(x) ne d then 
			return "charread wrong";
		end if;
		r:=f(x);
		Append(~gen, x);
		Append(~cha, finfld(r[1][1],d,K));
	end for;
	return cha,gen;
end function;

function betaread(Y,X,P,KK,gp)
    gtriv,gtang:=indtangetact(Y,X,P,KK,gp);
    ftriv:=Representation(gtriv);
    gtang:=Decomposition(gtang);
    beta:=<>;
    for x in gtang do 
        f:=fginverse(Representation(x),ftriv);
        Append(~beta,f);
    end for;
    return beta;
end function;




function gpinf(gp)
for x in AbelianSubgroups(gp) do
	GroupName(x`subgroup) cat "     " cat GroupName(Centralizer(gp,x`subgroup)) cat "      " cat GroupName(Centralizer(gp,x`subgroup)/x`subgroup);
	end for;
return "done";
end function;



function schememove(X,g)

Pp:=AmbientSpace(X);
kx:=CoordinateRing(Pp);

image:=[];
for i in [1..Dimension(Pp)+1] do
se:=Eltseq(Transpose(Matrix(g^(-1)))[i]);
poly:=0;
for j in [1..#se] do
poly+:=se[j]*kx.j;
end for;
Append(~image, poly);
end for;
fp:=hom<kx->kx|image>;
defpoly:=DefiningPolynomials(X);
newpoly:=[fp(pol):pol in defpoly];
newscheme:=Scheme(Pp,newpoly);

return newscheme;
end function;

function findactgp(Gm,Hm,V1) //V2>V1
	gen:=[Gm!Hm.i:i in [1..Ngens(Hm)]];
	for x in Gm do 
		if not x in Hm then 
			if schememove(V1,x) eq V1 then 
				Append(~gen, x);
			end if;
		end if;
	end for;
	res:=sub<Gm|gen>;
	return res;
end function;


function divdp(strat,gp,Xs)
	PP:=AmbientSpace(Xs);
	K:=BaseRing(gp);
	scgp:=FindScalar(gp);
	gpq,fq:=gp/scgp;
	c:=0;
	for x in strat do 
		if Dimension(x[2]) eq Dimension(Xs)-1 then
			c+:=1;
			Zg:=findactgp(gp,x[1],x[2]);
			<GroupName(fq(x[1])) cat ",  "  cat GroupName(fq(Zg)/fq(x[1]))  cat ",  "cat IntegerToString(Dimension(x[2]))>;
		end if;
	end for;
		"Centralizer has been quotient";
	return c;
end function;






K:=CyclotomicField(3);
w:=RootOfUnity(3);
P5<[x]>:=ProjectiveSpace(K,5);
PP5<[x]>:=CoordinateRing(P5);
ElementarySymmetricPolynomial(PP5,4);

P4<[y]>:=ProjectiveSpace(K,4);
X4:=Scheme(P4,[y[1]^4-y[1]*(y[2]^3+y[3]^3+y[4]^3+y[5]^3)+3*y[2]*y[3]*y[4]*y[5]]);
PP4<[y]>:=CoordinateRing(P4);

tr:=hom<PP5->PP4|[y[1]+y[2]+y[5],y[1]+w*y[2]+w^2*y[5],y[1]+w^2*y[2]+w*y[5],-y[1]-y[3]-y[4],-y[1]-w*y[3]-w^2*y[4],-y[1]-w^2*y[3]-w*y[4]]>;

X:=Scheme(P5,[ElementarySymmetricPolynomial(PP5,4),ElementarySymmetricPolynomial(PP5,1)]);

    Plp:=AssociativeArray();
    indi:=AssociativeArray();
    planelist:=[];//planelist contains planes on Burkhardt in P5
    planelistinP4:=[];//planelist contains planes on Burkhardt in P4
    ct:=0;
    for i1,i2,i3 in [0..5] do 
    	if i1 lt i2 and i2 lt i3 then 
    		ct+:=1;
	    	Plp[[i1,i2,i3,1]]:=ct;
	    	indi[ct]:=[i1,i2,i3,1];
	    	Append(~planelist,Scheme(X,[x[i2+1]-w*x[i1+1],x[i3+1]-w^2*x[i1+1] ]));
	    	Append(~planelistinP4,Scheme(X4,[tr(x[i2+1]-w*x[i1+1]),tr(x[i3+1]-w^2*x[i1+1]) ]));
	    	ct+:=1;
    	    Plp[[i1,i2,i3,-1]]:=ct;
    	    indi[ct]:=[i1,i2,i3,-1];
    	    Append(~planelist,Scheme(X,[x[i3+1]-w*x[i1+1],x[i2+1]-w^2*x[i1+1] ]));
    	    Append(~planelistinP4,Scheme(X4,[tr(x[i3+1]-w*x[i1+1]),tr(x[i2+1]-w^2*x[i1+1]) ]));

    	end if;
    end for;



 M:=GL(6,K);
 m1:=Matrix(K,6,6,[0,1,0,0,0,0,
 				   0,0,1,0,0,0,
 				   0,0,0,1,0,0,
 				   0,0,0,0,1,0,
 				   0,0,0,0,0,1,
 				   1,0,0,0,0,0]);

 m2:=Matrix(K,6,6,[0,1,0,0,0,0,
 				   1,0,0,0,0,0,
 				   0,0,1,0,0,0,
 				   0,0,0,1,0,0,
 				   0,0,0,0,1,0,
 				   0,0,0,0,0,1]);

G:=sub<M|m1,m2>;

M5:=GL(5,K);



Bm2:=ScalarMatrix(K,5,1/3)*Matrix(K,5,5,[-2*w-1,-2*w+2,0,0,0,	
				  						-w+1,-w-2,0,0,0,
										0,0,w+2,w+2,w-1,
				  						0,0,w+2,w-1,w+2,
				  						0,0,w-1,w+2,w+2]);


Bm3:=ScalarMatrix(K,5,1/3)*Matrix(K,5,5,[-2*w-1,0,0,-2*w+2,0,	
				  						0,-2*w-1,-2*w-1,0,w+2,
										0,w-1,-2*w-1,0,w-1,
				  						2*w+1,0,0,-w+1,0,
				  						0,w+2,-2*w-1,0,-2*w-1]);

GP4:=sub<M5|Bm2,Bm3>;


//G=GP4=PSp(4,3)





MM:=GL(40,Integers());


act1:=SparseMatrix(Rationals(),40,40);

for i in [1..40] do

tar:=Position(planelist,schememove(planelist[i],m1));
act1[i,tar]:=1;
end for;



act2:=SparseMatrix(Rationals(),40,40);

for i in [1..40] do

tar:=Position(planelist,schememove(planelist[i],m2));
act2[i,tar]:=1;
end for;

S:=GModule(G,[Matrix(act1),Matrix(act2)]);
//S: G-module of dimension 40, using planes in P5



MMP4:=GL(40,Integers());


act1P4:=SparseMatrix(Rationals(),40,40);

for i in [1..40] do

tar:=Position(planelistinP4,schememove(planelistinP4[i],Bm2));
act1P4[i,tar]:=1;
end for;



act2P4:=SparseMatrix(Rationals(),40,40);

for i in [1..40] do

tar:=Position(planelistinP4,schememove(planelistinP4[i],Bm3));
if tar eq 0 then "a";end if;
act2P4[i,tar]:=1;
end for;

SP4:=GModule(GP4,[Matrix(act1P4),Matrix(act2P4)]);
//SP4: G-module of dimension 40, using planes in P4
function indic(i,j,a1,a2)
	if {@i[1],i[2],i[3]@} eq {@j[1],j[2],j[3]@} and a1 eq a2 then return -2;end if;
	if {@i[1],i[2],i[3]@} eq {@j[1],j[2],j[3]@} and a1 ne a2 then return 1;end if;
	c:=#[x: x in {@i[1],i[2],i[3]@} meet {@j[1],j[2],j[3]@}];
	if c eq 0 then return 1; end if;
	if c eq 1 then return 0;end if;
	d:=0;
	for a,b,ap,bp in [1..3] do 
		if (i[a] eq j[ap]) and (i[b] eq j[bp]) and ((b-a) eq (bp-ap)) and (a lt b) and (ap lt bp)  then 
			d:=1; break a;
		end if;
	end for;
	if c eq 2 and a1 eq a2 then return d;end if;
	if c eq 2 and a1 ne a2 then return 1-d;end if;

end function;

function mul(P1,P2) 
	if Dimension(P1 meet P2) eq 0 then 
	return 0;
	elif Dimension(P1 meet P2) eq 1 then 
	return 1;
	elif Dimension(P1 meet P2) eq 2 then
	return -2; 
	end if;
end function;


rel:=SparseMatrix(Rationals(),40,40);//rel:intersection matrix
for i,j in [1..40] do
I:=AssociativeArray();
I[1]:=indi[i][1];I[2]:=indi[i][2];I[3]:=indi[i][3];a1:=indi[i][4];
J:=AssociativeArray();
J[1]:=indi[j][1];J[2]:=indi[j][2];J[3]:=indi[j][3];a2:=indi[j][4];
rel[i,j]:=indic(I,J,a1,a2);
end for;
rel:=Matrix(rel);
i:=1;
R:=sub<S|[S!(&+[Vector(Rows(Transpose(rel))[i][j]*S.j): j in [1..40]]):i in [1..40]]>;
RP4:=sub<SP4|[SP4!(&+[Vector(Rows(Transpose(rel))[i][j]*SP4.j): j in [1..40]]):i in [1..40]]>;


L:=SubgroupLattice(GP4);
CR:=CohomologyModule(GP4,RP4);//CR is the class group module

for x in [2..#L] do 
	H:=L[x];
	CRH:=Restriction(CR,H);
	H0R:=CohomologyGroup(CRH,0);
	IntegerToString(x) cat ". " cat "Rank of Cl^G where G= " cat GroupName(H) cat " is " cat IntegerToString(Degree(H0R));
end for;



















